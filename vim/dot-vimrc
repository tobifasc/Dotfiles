set nocompatible
syntax on
set hlsearch
set incsearch
set ignorecase
set showmatch
set number relativenumber
set noshowmode
set scrolloff=8

filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

" mappings
let mapleader = " "
inoremap jj <Esc>
map <leader>l :noh<cr>

" wsltty cursor settings
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"


" vim-plug
" run :PlugInstall after updating list
call plug#begin('~/.vim/plugged')
    Plug 'morhetz/gruvbox'

    Plug 'lervag/vimtex'
        let g:tex_flavor = 'latex'
        let g:vimtex_view_general_viewer = 'okular'
        let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
        let g:vimtex_view_general_options_latexmk = '--unique'

    Plug 'honza/vim-snippets'

    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'

    Plug 'neoclide/coc.nvim'
call plug#end()


" statusline
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0 ? '['.l:branchname.']' : ''
endfunction

" Dictionary: take mode() input -> longer notation of current mode
" mode() is defined by Vim
let g:currentmode={ 'n' : 'Normal', 'no' : 'N·Operator Pending', 'v' : 'Visual', 'V' : 'V·Line', '^V' : 'V·Block', 's' : 'Select', 'S': 'S·Line', '^S' : 'S·Block', 'i' : 'Insert', 'R' : 'Replace', 'Rv' : 'V·Replace', 'c' : 'Command', 'cv' : 'Vim Ex', 'ce' : 'Ex', 'r' : 'Prompt', 'rm' : 'More', 'r?' : 'Confirm', '!' : 'Shell', 't' : 'Terminal'}

function! ModeCurrent() abort
    let l:modecurrent = mode()
    " return '[' . get(g:currentmode, l:modecurrent, 'V·Block') . ']'
    return toupper(get(g:currentmode, l:modecurrent, 'V·Block'))
endfunction

set laststatus=2 "always show
set statusline=
set statusline+=%#GruvboxYellowSign#
set statusline+=\ %{ModeCurrent()}\ 
set statusline+=%0*
set statusline+=\ %F\ %m%r%h%w
set statusline+=%{StatuslineGit()}
set statusline+=%= " right side
set statusline+=%#GruvboxYellowSign#
set statusline+=\ %y\ %l:%c\/%L\ 

" colorscheme
autocmd vimenter * ++nested colorscheme gruvbox

" Use tab to navigate coc and cr to accept
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"if not pumvisible use <S-Tab> to shift left
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-d>" 
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<s-tab>'

let g:vimtex_quickfix_open_on_warning = 0

function SmoothScroll(up)
    if a:up
        let scrollaction="\<C-y>"
    else
        let scrollaction="\<C-e>"
    endif
    exec "normal " . scrollaction
    redraw
    let counter=1
    while counter<&scroll
        let counter+=1
        sleep 15m
        redraw
        exec "normal " . scrollaction
    endwhile
endfunction

nnoremap <C-U> :call SmoothScroll(1)<Enter>
nnoremap <C-D> :call SmoothScroll(0)<Enter>
inoremap <C-U> <Esc>:call SmoothScroll(1)<Enter>i
inoremap <C-D> <Esc>:call SmoothScroll(0)<Enter>i
